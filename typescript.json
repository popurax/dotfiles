{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"リストオブジェクトから値の種類を列挙したリストを生成": {
		"description": "TypeScriptのオブジェクトの型を作る時とかで、あるキーにどんな値が入るかが分かるので、「status:Stringではなく、status:'ENABLE'|'DISABLE'の詳細型を定義する」という事がしやすくなる。",
		"prefix": "liob2enum",
		"body": [    
			"const listObject = n",
			"const targetKeys = Object.entries(listObject[0])",
			"const recursive = (listObject, targetKeys) => {",
				"return targetKeys.map(([k, v]) => {",
					"if (v instanceof Object) {",
						"return { [k]: recursive(listObject.map(n => n[k]), Object.entries(v)) }",
					"}",
					"// @ts-ignore",
					"return { [k]: R.pipe(R.groupBy(n => n[k]), Object.keys)(listObject) }",
				"})",
			"}",
			"const keyEnums = recursive(listObject, targetKeys)",
			"console.log(JSON.stringify(keyEnums, null, '\t'))",
		]
	}
}