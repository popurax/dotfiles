{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"独自コンソールロガー": {
		"scope": "javascript,typescript",
		"prefix": "log",
		"body": [
			"// eslint-disable-next-line prefer-const",
			"let logObjs = { label: { avg: 0, count: 0, sum: 0 } }",
			"const logTimeAvg = (label) => {",
			"  const start = Date.now()",
			"  return (logger = console.log) => {",
			"    const time = Date.now() - start",
			"    const logObj = logObjs[label] || {}",
			"    let { avg = 0, count = 0, sum = 0 } = logObj",
			"    sum = sum + time",
			"    avg = sum / count",
			"    count++",
			"    logger(label, { time, avg, count })",
			"    logObjs[label] = { avg, count, sum }",
			"  }",
			"}",
		]
	},
	"ReactLog改良版": {
		"scope": "javascript, typescript",
		"prefix": "reactLog",
		"body": [
			"function ReactLog (React) {",
			"	var setState = React.Component.prototype.setState",
			"",
			"	function logSetState(nextState) {",
			"		var group = this.constructor.name + ' state changed'",
			"		var resolvedNextState = typeof nextState === 'function' ? nextState(this.state) : nextState",
			"",
			"		console.group(group)",
			"",
			"		console.log('Previous State', this.state)",
			"		console.log('Incoming State', resolvedNextState)",
			"		// console.trace('Incoming State')",
			"		// const err = new Error()",
			"		console.groupCollapsed('Incoming State Trace')",
			"		console.trace()",
			"		console.groupEnd('Incoming State Trace')",
			"",
			"		console.groupEnd(group)",
			"",
			"		return setState.apply(this, arguments)",
			"	}",
			"",
			"	var ReactLogState = function (element) {",
			"		if (element.setState === logSetState) return",
			"",
			"		element.setState = logSetState.bind(element)",
			"",
			"		console.info('Watching setState for ' + element.constructor.name)",
			"	}",
			"",
			"	ReactLogState.logAll = function () {",
			"		React.Component.prototype.setState = logSetState",
			"",
			"		console.info('Watching setState for all elements.')",
			"	}",
			"",
			"	return ReactLogState",
			"}",
			"",
			"constructor(props) {",
			"    // XXX stateの更新デバック",
			"    ReactLog(React)(this)",
			"}			",
		]
	},
	"値の変化を監視": {
		"scope": "javascript, typescript",
		"prefix": "reactLog",
		"body": [
		"this.state = {",
		"	fulled: false,",
		"}",
        "Object.defineProperty(this.viewer, 'fulled', {",
        "    set: (bool) => {",
        "        console.log('fulled change', bool)",
        "        if (this.fulled && !bool) {",
        "            // ",
        "            setTimeout(() => this.applyDefaultImageView(), 0)",
        "        }",
        "        this.fulled = bool",
        "    },",
        "    get: () => {",
        "        return this.fulled",
        "    }",
        "})",
		]
	}
}
